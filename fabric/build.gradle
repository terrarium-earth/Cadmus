plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://maven.nucleoid.xyz/"
        content {
            includeGroup 'eu.pb4'
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    modApi "net.fabricmc.fabric-api:fabric-api:$fabric_api_version+$minecraft_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${mixinextras_version}")))
    include(modImplementation "eu.pb4:common-protection-api:$common_protection_api_version")
    modLocalRuntime("earth.terrarium.prometheus:prometheus-fabric-1.20:$prometheus_version") {
        transitive = false
    }

    // for testing
//    modLocalRuntime("maven.modrinth:xaeros-minimap:23.4.4_Fabric_1.20")
    modLocalRuntime("maven.modrinth:xaeros-world-map:1.30.4_Fabric_1.20")
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    filesMatching("fabric.mod.json") {
        expand "version": version,
                "fabric_loader_version": fabric_loader_version,
                "github_name": github_name,
                "resourcefullib_version": resourcefullib_version,
                "modrinth_id": modrinth_id
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
    archivesBaseName = "$mod_id-fabric-$minecraft_version"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}